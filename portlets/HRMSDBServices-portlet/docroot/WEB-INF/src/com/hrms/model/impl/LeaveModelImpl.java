/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.hrms.model.impl;

import com.hrms.model.Leave;
import com.hrms.model.LeaveModel;
import com.hrms.model.LeaveSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Leave service. Represents a row in the &quot;HRMS_Leave&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.hrms.model.LeaveModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LeaveImpl}.
 * </p>
 *
 * @author yashpalsinh
 * @see LeaveImpl
 * @see com.hrms.model.Leave
 * @see com.hrms.model.LeaveModel
 * @generated
 */
@JSON(strict = true)
public class LeaveModelImpl extends BaseModelImpl<Leave> implements LeaveModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a leave model instance should use the {@link com.hrms.model.Leave} interface instead.
	 */
	public static final String TABLE_NAME = "HRMS_Leave";
	public static final Object[][] TABLE_COLUMNS = {
			{ "leaveId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "leaveName", Types.VARCHAR },
			{ "leaveType", Types.VARCHAR },
			{ "leavesAllowedPerYear", Types.INTEGER },
			{ "carryOver", Types.BOOLEAN },
			{ "encachement", Types.BOOLEAN },
			{ "Status", Types.BOOLEAN },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "createBy", Types.BIGINT },
			{ "modifiedBy", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table HRMS_Leave (leaveId LONG not null primary key,groupId LONG,companyId LONG,leaveName VARCHAR(75) null,leaveType VARCHAR(75) null,leavesAllowedPerYear INTEGER,carryOver BOOLEAN,encachement BOOLEAN,Status BOOLEAN,createDate DATE null,modifiedDate DATE null,createBy LONG,modifiedBy LONG)";
	public static final String TABLE_SQL_DROP = "drop table HRMS_Leave";
	public static final String ORDER_BY_JPQL = " ORDER BY leave.leaveId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY HRMS_Leave.leaveId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.hrms.model.Leave"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.hrms.model.Leave"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Leave toModel(LeaveSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Leave model = new LeaveImpl();

		model.setLeaveId(soapModel.getLeaveId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setLeaveName(soapModel.getLeaveName());
		model.setLeaveType(soapModel.getLeaveType());
		model.setLeavesAllowedPerYear(soapModel.getLeavesAllowedPerYear());
		model.setCarryOver(soapModel.getCarryOver());
		model.setEncachement(soapModel.getEncachement());
		model.setStatus(soapModel.getStatus());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCreateBy(soapModel.getCreateBy());
		model.setModifiedBy(soapModel.getModifiedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Leave> toModels(LeaveSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Leave> models = new ArrayList<Leave>(soapModels.length);

		for (LeaveSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.hrms.model.Leave"));

	public LeaveModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _leaveId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLeaveId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _leaveId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Leave.class;
	}

	@Override
	public String getModelClassName() {
		return Leave.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("leaveId", getLeaveId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("leaveName", getLeaveName());
		attributes.put("leaveType", getLeaveType());
		attributes.put("leavesAllowedPerYear", getLeavesAllowedPerYear());
		attributes.put("carryOver", getCarryOver());
		attributes.put("encachement", getEncachement());
		attributes.put("Status", getStatus());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("createBy", getCreateBy());
		attributes.put("modifiedBy", getModifiedBy());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long leaveId = (Long)attributes.get("leaveId");

		if (leaveId != null) {
			setLeaveId(leaveId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String leaveName = (String)attributes.get("leaveName");

		if (leaveName != null) {
			setLeaveName(leaveName);
		}

		String leaveType = (String)attributes.get("leaveType");

		if (leaveType != null) {
			setLeaveType(leaveType);
		}

		Integer leavesAllowedPerYear = (Integer)attributes.get(
				"leavesAllowedPerYear");

		if (leavesAllowedPerYear != null) {
			setLeavesAllowedPerYear(leavesAllowedPerYear);
		}

		Boolean carryOver = (Boolean)attributes.get("carryOver");

		if (carryOver != null) {
			setCarryOver(carryOver);
		}

		Boolean encachement = (Boolean)attributes.get("encachement");

		if (encachement != null) {
			setEncachement(encachement);
		}

		Boolean Status = (Boolean)attributes.get("Status");

		if (Status != null) {
			setStatus(Status);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long createBy = (Long)attributes.get("createBy");

		if (createBy != null) {
			setCreateBy(createBy);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}
	}

	@JSON
	@Override
	public long getLeaveId() {
		return _leaveId;
	}

	@Override
	public void setLeaveId(long leaveId) {
		_leaveId = leaveId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getLeaveName() {
		if (_leaveName == null) {
			return StringPool.BLANK;
		}
		else {
			return _leaveName;
		}
	}

	@Override
	public void setLeaveName(String leaveName) {
		_leaveName = leaveName;
	}

	@JSON
	@Override
	public String getLeaveType() {
		if (_leaveType == null) {
			return StringPool.BLANK;
		}
		else {
			return _leaveType;
		}
	}

	@Override
	public void setLeaveType(String leaveType) {
		_leaveType = leaveType;
	}

	@JSON
	@Override
	public int getLeavesAllowedPerYear() {
		return _leavesAllowedPerYear;
	}

	@Override
	public void setLeavesAllowedPerYear(int leavesAllowedPerYear) {
		_leavesAllowedPerYear = leavesAllowedPerYear;
	}

	@JSON
	@Override
	public boolean getCarryOver() {
		return _carryOver;
	}

	@Override
	public boolean isCarryOver() {
		return _carryOver;
	}

	@Override
	public void setCarryOver(boolean carryOver) {
		_carryOver = carryOver;
	}

	@JSON
	@Override
	public boolean getEncachement() {
		return _encachement;
	}

	@Override
	public boolean isEncachement() {
		return _encachement;
	}

	@Override
	public void setEncachement(boolean encachement) {
		_encachement = encachement;
	}

	@JSON
	@Override
	public boolean getStatus() {
		return _Status;
	}

	@Override
	public boolean isStatus() {
		return _Status;
	}

	@Override
	public void setStatus(boolean Status) {
		_Status = Status;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCreateBy() {
		return _createBy;
	}

	@Override
	public void setCreateBy(long createBy) {
		_createBy = createBy;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Leave.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Leave toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Leave)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LeaveImpl leaveImpl = new LeaveImpl();

		leaveImpl.setLeaveId(getLeaveId());
		leaveImpl.setGroupId(getGroupId());
		leaveImpl.setCompanyId(getCompanyId());
		leaveImpl.setLeaveName(getLeaveName());
		leaveImpl.setLeaveType(getLeaveType());
		leaveImpl.setLeavesAllowedPerYear(getLeavesAllowedPerYear());
		leaveImpl.setCarryOver(getCarryOver());
		leaveImpl.setEncachement(getEncachement());
		leaveImpl.setStatus(getStatus());
		leaveImpl.setCreateDate(getCreateDate());
		leaveImpl.setModifiedDate(getModifiedDate());
		leaveImpl.setCreateBy(getCreateBy());
		leaveImpl.setModifiedBy(getModifiedBy());

		leaveImpl.resetOriginalValues();

		return leaveImpl;
	}

	@Override
	public int compareTo(Leave leave) {
		long primaryKey = leave.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Leave)) {
			return false;
		}

		Leave leave = (Leave)obj;

		long primaryKey = leave.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Leave> toCacheModel() {
		LeaveCacheModel leaveCacheModel = new LeaveCacheModel();

		leaveCacheModel.leaveId = getLeaveId();

		leaveCacheModel.groupId = getGroupId();

		leaveCacheModel.companyId = getCompanyId();

		leaveCacheModel.leaveName = getLeaveName();

		String leaveName = leaveCacheModel.leaveName;

		if ((leaveName != null) && (leaveName.length() == 0)) {
			leaveCacheModel.leaveName = null;
		}

		leaveCacheModel.leaveType = getLeaveType();

		String leaveType = leaveCacheModel.leaveType;

		if ((leaveType != null) && (leaveType.length() == 0)) {
			leaveCacheModel.leaveType = null;
		}

		leaveCacheModel.leavesAllowedPerYear = getLeavesAllowedPerYear();

		leaveCacheModel.carryOver = getCarryOver();

		leaveCacheModel.encachement = getEncachement();

		leaveCacheModel.Status = getStatus();

		Date createDate = getCreateDate();

		if (createDate != null) {
			leaveCacheModel.createDate = createDate.getTime();
		}
		else {
			leaveCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			leaveCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			leaveCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		leaveCacheModel.createBy = getCreateBy();

		leaveCacheModel.modifiedBy = getModifiedBy();

		return leaveCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{leaveId=");
		sb.append(getLeaveId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", leaveName=");
		sb.append(getLeaveName());
		sb.append(", leaveType=");
		sb.append(getLeaveType());
		sb.append(", leavesAllowedPerYear=");
		sb.append(getLeavesAllowedPerYear());
		sb.append(", carryOver=");
		sb.append(getCarryOver());
		sb.append(", encachement=");
		sb.append(getEncachement());
		sb.append(", Status=");
		sb.append(getStatus());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", createBy=");
		sb.append(getCreateBy());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.hrms.model.Leave");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>leaveId</column-name><column-value><![CDATA[");
		sb.append(getLeaveId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveName</column-name><column-value><![CDATA[");
		sb.append(getLeaveName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveType</column-name><column-value><![CDATA[");
		sb.append(getLeaveType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leavesAllowedPerYear</column-name><column-value><![CDATA[");
		sb.append(getLeavesAllowedPerYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>carryOver</column-name><column-value><![CDATA[");
		sb.append(getCarryOver());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>encachement</column-name><column-value><![CDATA[");
		sb.append(getEncachement());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createBy</column-name><column-value><![CDATA[");
		sb.append(getCreateBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Leave.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Leave.class };
	private long _leaveId;
	private long _groupId;
	private long _companyId;
	private String _leaveName;
	private String _leaveType;
	private int _leavesAllowedPerYear;
	private boolean _carryOver;
	private boolean _encachement;
	private boolean _Status;
	private Date _createDate;
	private Date _modifiedDate;
	private long _createBy;
	private long _modifiedBy;
	private Leave _escapedModel;
}