/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.hrms.model.impl;

import com.hrms.model.EmployeeComplaint;
import com.hrms.model.EmployeeComplaintModel;
import com.hrms.model.EmployeeComplaintSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EmployeeComplaint service. Represents a row in the &quot;HRMS_EmployeeComplaint&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.hrms.model.EmployeeComplaintModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeComplaintImpl}.
 * </p>
 *
 * @author yashpalsinh
 * @see EmployeeComplaintImpl
 * @see com.hrms.model.EmployeeComplaint
 * @see com.hrms.model.EmployeeComplaintModel
 * @generated
 */
@JSON(strict = true)
public class EmployeeComplaintModelImpl extends BaseModelImpl<EmployeeComplaint>
	implements EmployeeComplaintModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee complaint model instance should use the {@link com.hrms.model.EmployeeComplaint} interface instead.
	 */
	public static final String TABLE_NAME = "HRMS_EmployeeComplaint";
	public static final Object[][] TABLE_COLUMNS = {
			{ "employeeComplaintId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "complaintTitle", Types.VARCHAR },
			{ "complaintDiscription", Types.VARCHAR },
			{ "complaintFrom", Types.BIGINT },
			{ "complaintDate", Types.TIMESTAMP },
			{ "status", Types.BOOLEAN },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "createBy", Types.BIGINT },
			{ "modifiedBy", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table HRMS_EmployeeComplaint (employeeComplaintId LONG not null primary key,userId LONG,groupId LONG,companyId LONG,complaintTitle VARCHAR(75) null,complaintDiscription VARCHAR(75) null,complaintFrom LONG,complaintDate DATE null,status BOOLEAN,modifiedDate DATE null,createBy LONG,modifiedBy LONG)";
	public static final String TABLE_SQL_DROP = "drop table HRMS_EmployeeComplaint";
	public static final String ORDER_BY_JPQL = " ORDER BY employeeComplaint.employeeComplaintId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY HRMS_EmployeeComplaint.employeeComplaintId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.hrms.model.EmployeeComplaint"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.hrms.model.EmployeeComplaint"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.hrms.model.EmployeeComplaint"),
			true);
	public static long CREATEBY_COLUMN_BITMASK = 1L;
	public static long MODIFIEDBY_COLUMN_BITMASK = 2L;
	public static long EMPLOYEECOMPLAINTID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EmployeeComplaint toModel(EmployeeComplaintSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmployeeComplaint model = new EmployeeComplaintImpl();

		model.setEmployeeComplaintId(soapModel.getEmployeeComplaintId());
		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setComplaintTitle(soapModel.getComplaintTitle());
		model.setComplaintDiscription(soapModel.getComplaintDiscription());
		model.setComplaintFrom(soapModel.getComplaintFrom());
		model.setComplaintDate(soapModel.getComplaintDate());
		model.setStatus(soapModel.getStatus());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCreateBy(soapModel.getCreateBy());
		model.setModifiedBy(soapModel.getModifiedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EmployeeComplaint> toModels(
		EmployeeComplaintSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EmployeeComplaint> models = new ArrayList<EmployeeComplaint>(soapModels.length);

		for (EmployeeComplaintSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.hrms.model.EmployeeComplaint"));

	public EmployeeComplaintModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeComplaintId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeComplaintId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeComplaintId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeComplaint.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeComplaint.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("employeeComplaintId", getEmployeeComplaintId());
		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("complaintTitle", getComplaintTitle());
		attributes.put("complaintDiscription", getComplaintDiscription());
		attributes.put("complaintFrom", getComplaintFrom());
		attributes.put("complaintDate", getComplaintDate());
		attributes.put("status", getStatus());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("createBy", getCreateBy());
		attributes.put("modifiedBy", getModifiedBy());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long employeeComplaintId = (Long)attributes.get("employeeComplaintId");

		if (employeeComplaintId != null) {
			setEmployeeComplaintId(employeeComplaintId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String complaintTitle = (String)attributes.get("complaintTitle");

		if (complaintTitle != null) {
			setComplaintTitle(complaintTitle);
		}

		String complaintDiscription = (String)attributes.get(
				"complaintDiscription");

		if (complaintDiscription != null) {
			setComplaintDiscription(complaintDiscription);
		}

		Long complaintFrom = (Long)attributes.get("complaintFrom");

		if (complaintFrom != null) {
			setComplaintFrom(complaintFrom);
		}

		Date complaintDate = (Date)attributes.get("complaintDate");

		if (complaintDate != null) {
			setComplaintDate(complaintDate);
		}

		Boolean status = (Boolean)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long createBy = (Long)attributes.get("createBy");

		if (createBy != null) {
			setCreateBy(createBy);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}
	}

	@JSON
	@Override
	public long getEmployeeComplaintId() {
		return _employeeComplaintId;
	}

	@Override
	public void setEmployeeComplaintId(long employeeComplaintId) {
		_employeeComplaintId = employeeComplaintId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getComplaintTitle() {
		if (_complaintTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _complaintTitle;
		}
	}

	@Override
	public void setComplaintTitle(String complaintTitle) {
		_complaintTitle = complaintTitle;
	}

	@JSON
	@Override
	public String getComplaintDiscription() {
		if (_complaintDiscription == null) {
			return StringPool.BLANK;
		}
		else {
			return _complaintDiscription;
		}
	}

	@Override
	public void setComplaintDiscription(String complaintDiscription) {
		_complaintDiscription = complaintDiscription;
	}

	@JSON
	@Override
	public long getComplaintFrom() {
		return _complaintFrom;
	}

	@Override
	public void setComplaintFrom(long complaintFrom) {
		_complaintFrom = complaintFrom;
	}

	@JSON
	@Override
	public Date getComplaintDate() {
		return _complaintDate;
	}

	@Override
	public void setComplaintDate(Date complaintDate) {
		_complaintDate = complaintDate;
	}

	@JSON
	@Override
	public boolean getStatus() {
		return _status;
	}

	@Override
	public boolean isStatus() {
		return _status;
	}

	@Override
	public void setStatus(boolean status) {
		_status = status;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCreateBy() {
		return _createBy;
	}

	@Override
	public void setCreateBy(long createBy) {
		_columnBitmask |= CREATEBY_COLUMN_BITMASK;

		if (!_setOriginalCreateBy) {
			_setOriginalCreateBy = true;

			_originalCreateBy = _createBy;
		}

		_createBy = createBy;
	}

	public long getOriginalCreateBy() {
		return _originalCreateBy;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_columnBitmask |= MODIFIEDBY_COLUMN_BITMASK;

		if (!_setOriginalModifiedBy) {
			_setOriginalModifiedBy = true;

			_originalModifiedBy = _modifiedBy;
		}

		_modifiedBy = modifiedBy;
	}

	public long getOriginalModifiedBy() {
		return _originalModifiedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			EmployeeComplaint.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeComplaint toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmployeeComplaint)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeComplaintImpl employeeComplaintImpl = new EmployeeComplaintImpl();

		employeeComplaintImpl.setEmployeeComplaintId(getEmployeeComplaintId());
		employeeComplaintImpl.setUserId(getUserId());
		employeeComplaintImpl.setGroupId(getGroupId());
		employeeComplaintImpl.setCompanyId(getCompanyId());
		employeeComplaintImpl.setComplaintTitle(getComplaintTitle());
		employeeComplaintImpl.setComplaintDiscription(getComplaintDiscription());
		employeeComplaintImpl.setComplaintFrom(getComplaintFrom());
		employeeComplaintImpl.setComplaintDate(getComplaintDate());
		employeeComplaintImpl.setStatus(getStatus());
		employeeComplaintImpl.setModifiedDate(getModifiedDate());
		employeeComplaintImpl.setCreateBy(getCreateBy());
		employeeComplaintImpl.setModifiedBy(getModifiedBy());

		employeeComplaintImpl.resetOriginalValues();

		return employeeComplaintImpl;
	}

	@Override
	public int compareTo(EmployeeComplaint employeeComplaint) {
		long primaryKey = employeeComplaint.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmployeeComplaint)) {
			return false;
		}

		EmployeeComplaint employeeComplaint = (EmployeeComplaint)obj;

		long primaryKey = employeeComplaint.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EmployeeComplaintModelImpl employeeComplaintModelImpl = this;

		employeeComplaintModelImpl._originalCreateBy = employeeComplaintModelImpl._createBy;

		employeeComplaintModelImpl._setOriginalCreateBy = false;

		employeeComplaintModelImpl._originalModifiedBy = employeeComplaintModelImpl._modifiedBy;

		employeeComplaintModelImpl._setOriginalModifiedBy = false;

		employeeComplaintModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EmployeeComplaint> toCacheModel() {
		EmployeeComplaintCacheModel employeeComplaintCacheModel = new EmployeeComplaintCacheModel();

		employeeComplaintCacheModel.employeeComplaintId = getEmployeeComplaintId();

		employeeComplaintCacheModel.userId = getUserId();

		employeeComplaintCacheModel.groupId = getGroupId();

		employeeComplaintCacheModel.companyId = getCompanyId();

		employeeComplaintCacheModel.complaintTitle = getComplaintTitle();

		String complaintTitle = employeeComplaintCacheModel.complaintTitle;

		if ((complaintTitle != null) && (complaintTitle.length() == 0)) {
			employeeComplaintCacheModel.complaintTitle = null;
		}

		employeeComplaintCacheModel.complaintDiscription = getComplaintDiscription();

		String complaintDiscription = employeeComplaintCacheModel.complaintDiscription;

		if ((complaintDiscription != null) &&
				(complaintDiscription.length() == 0)) {
			employeeComplaintCacheModel.complaintDiscription = null;
		}

		employeeComplaintCacheModel.complaintFrom = getComplaintFrom();

		Date complaintDate = getComplaintDate();

		if (complaintDate != null) {
			employeeComplaintCacheModel.complaintDate = complaintDate.getTime();
		}
		else {
			employeeComplaintCacheModel.complaintDate = Long.MIN_VALUE;
		}

		employeeComplaintCacheModel.status = getStatus();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			employeeComplaintCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			employeeComplaintCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		employeeComplaintCacheModel.createBy = getCreateBy();

		employeeComplaintCacheModel.modifiedBy = getModifiedBy();

		return employeeComplaintCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{employeeComplaintId=");
		sb.append(getEmployeeComplaintId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", complaintTitle=");
		sb.append(getComplaintTitle());
		sb.append(", complaintDiscription=");
		sb.append(getComplaintDiscription());
		sb.append(", complaintFrom=");
		sb.append(getComplaintFrom());
		sb.append(", complaintDate=");
		sb.append(getComplaintDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", createBy=");
		sb.append(getCreateBy());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.hrms.model.EmployeeComplaint");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>employeeComplaintId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeComplaintId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>complaintTitle</column-name><column-value><![CDATA[");
		sb.append(getComplaintTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>complaintDiscription</column-name><column-value><![CDATA[");
		sb.append(getComplaintDiscription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>complaintFrom</column-name><column-value><![CDATA[");
		sb.append(getComplaintFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>complaintDate</column-name><column-value><![CDATA[");
		sb.append(getComplaintDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createBy</column-name><column-value><![CDATA[");
		sb.append(getCreateBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EmployeeComplaint.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EmployeeComplaint.class
		};
	private long _employeeComplaintId;
	private long _userId;
	private String _userUuid;
	private long _groupId;
	private long _companyId;
	private String _complaintTitle;
	private String _complaintDiscription;
	private long _complaintFrom;
	private Date _complaintDate;
	private boolean _status;
	private Date _modifiedDate;
	private long _createBy;
	private long _originalCreateBy;
	private boolean _setOriginalCreateBy;
	private long _modifiedBy;
	private long _originalModifiedBy;
	private boolean _setOriginalModifiedBy;
	private long _columnBitmask;
	private EmployeeComplaint _escapedModel;
}